package context

import (
	"context"
	"github.com/CodeNoobKing/go-ai-chat/server/prompt"
	"sync"
)

// Context
// Include the full context for the enhancement chain.
// For each user request, a new Context instance would be created.
// The Context is used to pass information between the enhancers.
// The Context would be finally consumed by the completion.Api interface.
type Context struct {
	context.Context

	// Lock for the context.
	// Used for concurrent access.
	Lock *sync.RWMutex

	// Enhancements
	// The enhancements is generated by the enhancers.
	// The enhancements would be consumed by
	Enhancements []prompt.Enhancement

	// ExtraArgs
	// Store any extra arguments.
	// Can be accessed by Value(key) method
	// Be aware to use lock to protect the map for concurrent access.
	ExtraArgs map[any]any
}

// NewContext create a new Context instance.
func NewContext(ctx context.Context) *Context {
	return &Context{
		Context:   ctx,
		Lock:      new(sync.RWMutex),
		ExtraArgs: make(map[any]any),
	}
}

// Value a implementation of context.Context.Value(key).
func (c *Context) Value(key any) any {
	c.Lock.RLock()
	defer c.Lock.RUnlock()

	value, ok := c.ExtraArgs[key]
	if ok {
		return value
	}

	return c.Context.Value(key)
}
